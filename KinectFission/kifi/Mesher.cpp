#include <cassert>
#include <cstddef>
#include <cstdint>

#include <kifi/util/math.h>
#include <kifi/util/stop_watch.h>

#include <kifi/Mesher.h>
#include <kifi/Volume.h>



namespace kifi {

void Mesher::Mesh( Volume const & volume, std::vector< util::vec3 > & outVertices )
{
	Generate< false >( volume, outVertices );
}

void Mesher::Mesh( Volume const & volume, std::vector< util::vec3 > & outVertices, std::vector< std::uint32_t > & outIndices )
{
	// TODO: Cleanup

	Generate< true >( volume, outVertices );
	
	m_tmpScratchPad.resize( 4 * m_vertexIDs.size() );
	util::radix_sort( m_vertexIDs.data(), m_vertexIDs.data() + m_vertexIDs.size(), outVertices.data(), m_tmpScratchPad.data() );
	
	outIndices.resize( m_indexIDs.size() );
	for( std::uint32_t i = 0; i < m_indexIDs.size(); ++i )
		outIndices[ i ] = i;

	m_tmpScratchPad.resize( 2 * m_indexIDs.size() );
	util::radix_sort( m_indexIDs.data(), m_indexIDs.data() + m_indexIDs.size(), outIndices.data(), m_tmpScratchPad.data() );

	std::uint32_t j = 0;
	for( std::uint32_t i = 0; i < m_vertexIDs.size(); ++i )
		while( j < m_indexIDs.size() && m_indexIDs[ j ] == m_vertexIDs[ i ] )
			m_indexIDs[ j++ ] = i;

	m_tmpScratchPad.resize( m_indexIDs.size() );
	for( int i = 0; i < m_indexIDs.size(); i++ )
		m_tmpScratchPad[ outIndices[ i ] ] = m_indexIDs[ i ];

	outIndices.swap( m_tmpScratchPad );
}



// static 
void Mesher::Mesh2Obj
(
	std::vector< util::vec3 > const & vertices,
	std::vector< unsigned > const & indices,

	char const * outObjFileName
)
{
	FILE * file;
	fopen_s( & file, outObjFileName, "w" );

	for( int i = 0; i < vertices.size(); i++ )
	{
		auto v = vertices[ i ];
		fprintf_s( file, "v %f %f %f\n", v.x, v.y, v.z );
	}
	
	for( int i = 0; i < indices.size(); i += 3 )
	{
		fprintf_s
		(
			file, 
			"f %d %d %d\n", 
			indices[ i ] + 1, indices[ i + 1 ] + 1, indices[ i + 2 ] + 1
		);
	}

	fclose( file );
}



#pragma warning( push )
#pragma warning( disable : 4127 ) // conditional expression is constant

template< bool GenerateTriangles >
void Mesher::Generate( Volume const & volume, std::vector< util::vec3 > & outVertices )
{
	assert( 1 == util::pack( 1, 0, 0 ) );

	outVertices.clear();
	m_vertexIDs.clear();
	m_indexIDs.clear();

	util::chrono::stop_watch t;

	auto const keys           = volume.Data().keys_cbegin();
	auto const values         = volume.Data().values_cbegin();
	std::size_t nKeys         = volume.Data().size();
	std::size_t maxVoxelIndex = nKeys - 1;

	// voxel indices
	int iTop = 0;
	int iFront = 0;
	int iFrontTop = 0;

	Voxel voxels[ 8 ];

	int deltas[] = {
		util::pack( 0, 0, 0 ), // self
		util::pack( 1, 0, 0 ), // right
		util::pack( 0, 1, 0 ), // top
		util::pack( 1, 1, 0 ), // top-right

		util::pack( 0, 0, 1 ), // front
		util::pack( 1, 0, 1 ), // front-right
		util::pack( 0, 1, 1 ), // front-top
		util::pack( 1, 1, 1 )  // front-top-right
	};

	for( std::size_t i = 0; i < nKeys; ++i )
	{
		if( 0.0f == values[ i ].Weight() )
			continue;

		while( keys[ iTop ] < keys[ i ] + deltas[ 2 ] && iTop < maxVoxelIndex )
			++iTop;

		while( keys[ iFront ] < keys[ i ] + deltas[ 4 ] && iFront < maxVoxelIndex )
			++iFront;

		voxels[ 0 ] = values[ i ];
		voxels[ 2 ] = ( keys[ iTop ]   == keys[ i ] + deltas[ 2 ] ) ? values[ iTop ]   : Voxel();
		voxels[ 4 ] = ( keys[ iFront ] == keys[ i ] + deltas[ 4 ] ) ? values[ iFront ] : Voxel();

		voxels[ 1 ] = ( i < maxVoxelIndex && keys[ i + 1 ] == keys[ i ] + deltas[ 1 ] ) ? values[ i + 1 ] : Voxel();

		std::uint32_t x0, y0, z0;
		util::unpack( keys[ i ], x0, y0, z0 );
		util::vec3 vert000 = volume.VoxelCenter( x0, y0, z0 ); 

		float dself = voxels[ 0 ].Distance();

		if( voxels[ 1 ].Weight() > 0.0f && dself * voxels[ 1 ].Distance() <= 0.0f )
		{
			util::vec3 vert = vert000;

			vert.x += util::lerp( 
				0.0f, 
				volume.VoxelLength(), 
				abs( dself ) / (abs( dself ) + abs( voxels[ 1 ].Distance() ))
			);

			outVertices.push_back( vert );
			if( GenerateTriangles )
				m_vertexIDs.push_back( 3 * keys[ i ] );
		}
				
		if( voxels[ 2 ].Weight() > 0.0f && dself * voxels[ 2 ].Distance() <= 0.0f )
		{
			util::vec3 vert = vert000;

			vert.y += util::lerp(
				0.0f, 
				volume.VoxelLength(), 
				abs( dself ) / (abs( dself ) + abs( voxels[ 2 ].Distance() ))
			);

			outVertices.push_back( vert );
			if( GenerateTriangles )
				m_vertexIDs.push_back( 3 * keys[ i ] + 1 );
		}
				
		if( voxels[ 4 ].Weight() > 0.0f && dself * voxels[ 4 ].Distance() <= 0.0f )
		{
			util::vec3 vert = vert000;

			vert.z += util::lerp( 
				0.0f, 
				volume.VoxelLength(), 
				abs( dself ) / (abs( dself ) + abs( voxels[ 4 ].Distance() ))
			);

			outVertices.push_back( vert );
			if( GenerateTriangles )
				m_vertexIDs.push_back( 3 * keys[ i ] + 2 );
		}



		if( GenerateTriangles )
		{
			if( 1023 == x0 ||
				1023 == y0 ||
				1023 == z0 )
				continue;

			while( keys[ iFrontTop ] < keys[ i ] + deltas[ 6 ] && iFrontTop < maxVoxelIndex )
				++iFrontTop;

			voxels[ 6 ] = ( keys[ iFrontTop ] == keys[ i ] + deltas[ 6 ] ) ? values[ iFrontTop ] : Voxel();

			voxels[ 3 ] = 
				( iTop < maxVoxelIndex && keys[ iTop + 1 ] == keys[ i ] + deltas[ 3 ] ) 
				? 
				values[ iTop + 1 ] : Voxel();
			
			voxels[ 5 ] = 
				( iFront < maxVoxelIndex && keys[ iFront + 1 ] == keys[ i ] + deltas[ 5 ] ) 
				?
				values[ iFront + 1 ] : Voxel();

			voxels[ 7 ] =
				( iFrontTop < maxVoxelIndex && keys[ iFrontTop + 1 ] == keys[ i ] + deltas[ 7 ] )
				?
				values[ iFrontTop + 1 ] : Voxel();

			int skip = 0;
			for( int i = 1; i < 8; ++i )
				skip |= ( 0.0f == voxels[ i ].Weight() );

			if( skip )
				continue;

			// We index vertices differently from Paul Bourke
			int lutIdx =
				( voxels[ 0 ].Distance() < 0.0f ) << 2 |
				( voxels[ 1 ].Distance() < 0.0f ) << 3 |
				( voxels[ 2 ].Distance() < 0.0f ) << 6 |
				( voxels[ 3 ].Distance() < 0.0f ) << 7 |
				( voxels[ 4 ].Distance() < 0.0f ) << 1 |	
				( voxels[ 5 ].Distance() < 0.0f ) << 0 |
				( voxels[ 6 ].Distance() < 0.0f ) << 5 |
				( voxels[ 7 ].Distance() < 0.0f ) << 4;

			std::uint32_t x1, y1, z1;
			x1 = x0 + 1;
			y1 = y0 + 1;
			z1 = z0 + 1;

			unsigned localToGlobal[ 12 ];
			localToGlobal[  0 ] = util::pack( x0, y0, z1 ) * 3;
			localToGlobal[  1 ] = util::pack( x0, y0, z0 ) * 3 + 2;
			localToGlobal[  2 ] = util::pack( x0, y0, z0 ) * 3;
			localToGlobal[  3 ] = util::pack( x1, y0, z0 ) * 3 + 2;
			localToGlobal[  4 ] = util::pack( x0, y1, z1 ) * 3;
			localToGlobal[  5 ] = util::pack( x0, y1, z0 ) * 3 + 2;
			localToGlobal[  6 ] = util::pack( x0, y1, z0 ) * 3;
			localToGlobal[  7 ] = util::pack( x1, y1, z0 ) * 3 + 2;
			localToGlobal[  8 ] = util::pack( x1, y0, z1 ) * 3 + 1;
			localToGlobal[  9 ] = util::pack( x0, y0, z1 ) * 3 + 1;
			localToGlobal[ 10 ] = util::pack( x0, y0, z0 ) * 3 + 1;
			localToGlobal[ 11 ] = util::pack( x1, y0, z0 ) * 3 + 1;

			for (
				int i = TriOffsets()[ lutIdx ],
				end   = TriOffsets()[ std::min( 255, lutIdx + 1 ) ];
				i < end;
				i++
			)
			{
				util::uint4 tri = TriTable()[ i ];
				m_indexIDs.push_back( localToGlobal[ tri.x ] );
				m_indexIDs.push_back( localToGlobal[ tri.y ] );
				m_indexIDs.push_back( localToGlobal[ tri.z ] );
			}
		}
	}

	t.take_time( "tsplat" );
	t.print_times();
}

template void Mesher::Generate< true >( Volume const &, std::vector< util::vec3 > & );
template void Mesher::Generate< false >( Volume const &, std::vector< util::vec3 > & );

#pragma warning( pop )



// static
std::uint32_t const * Mesher::TriOffsets()
{
	static std::uint32_t const triCounts[] = {
		0,   0,   1,   2,   4,   5,   7,   9,  12,  13,  15,  17,  20,  22,  25,  28,
	   30,  31,  33,  35,  38,  40,  43,  46,  50,  52,  55,  58,  62,  65,  69,  73,
	   76,  77,  79,  81,  84,  86,  89,  92,  96,  98, 101, 104, 108, 111, 115, 119,
	  122, 124, 127, 130, 132, 135, 139, 143, 146, 149, 153, 157, 160, 164, 169, 174,
	  176, 177, 179, 181, 184, 186, 189, 192, 196, 198, 201, 204, 208, 211, 215, 219,
	  222, 224, 227, 230, 234, 237, 241, 245, 250, 253, 257, 261, 266, 270, 275, 280,
	  284, 286, 289, 292, 296, 299, 303, 305, 308, 311, 315, 319, 324, 328, 333, 336,
	  338, 341, 345, 349, 352, 356, 361, 364, 366, 370, 375, 380, 384, 389, 391, 395,
	  396, 397, 399, 401, 404, 406, 409, 412, 416, 418, 421, 424, 428, 431, 435, 439,
	  442, 444, 447, 450, 454, 457, 461, 465, 470, 473, 475, 479, 482, 486, 489, 494,
	  496, 498, 501, 504, 508, 511, 515, 519, 524, 527, 531, 535, 540, 544, 549, 554,
	  558, 561, 565, 569, 572, 576, 581, 586, 590, 594, 597, 602, 604, 609, 613, 615,
	  616, 618, 621, 624, 628, 631, 635, 639, 644, 647, 651, 655, 660, 662, 665, 668,
	  670, 673, 677, 681, 686, 690, 695, 700, 702, 706, 709, 714, 718, 721, 723, 727,
	  728, 731, 735, 739, 744, 748, 753, 756, 760, 764, 769, 774, 776, 779, 783, 785,
	  786, 788, 791, 794, 796, 799, 803, 805, 806, 809, 811, 815, 816, 818, 819, 820
	};

	return triCounts;
}

// static
util::uint4 const * Mesher::TriTable()
{
	static unsigned const triTable[] = {
		 0,  8,  3, 0,  0,  1,  9, 0,  1,  8,  3, 0,  9,  8,  1, 0,
		 1,  2, 10, 0,  0,  8,  3, 0,  1,  2, 10, 0,  9,  2, 10, 0,
		 0,  2,  9, 0,  2,  8,  3, 0,  2, 10,  8, 0, 10,  9,  8, 0,
		 3, 11,  2, 0,  0, 11,  2, 0,  8, 11,  0, 0,  1,  9,  0, 0,
		 2,  3, 11, 0,  1, 11,  2, 0,  1,  9, 11, 0,  9,  8, 11, 0,
		 3, 10,  1, 0, 11, 10,  3, 0,  0, 10,  1, 0,  0,  8, 10, 0,
		 8, 11, 10, 0,  3,  9,  0, 0,  3, 11,  9, 0, 11, 10,  9, 0,
		 9,  8, 10, 0, 10,  8, 11, 0,  4,  7,  8, 0,  4,  3,  0, 0,
		 7,  3,  4, 0,  0,  1,  9, 0,  8,  4,  7, 0,  4,  1,  9, 0,
		 4,  7,  1, 0,  7,  3,  1, 0,  1,  2, 10, 0,  8,  4,  7, 0,
		 3,  4,  7, 0,  3,  0,  4, 0,  1,  2, 10, 0,  9,  2, 10, 0,
		 9,  0,  2, 0,  8,  4,  7, 0,  2, 10,  9, 0,  2,  9,  7, 0,
		 2,  7,  3, 0,  7,  9,  4, 0,  8,  4,  7, 0,  3, 11,  2, 0,
		11,  4,  7, 0, 11,  2,  4, 0,  2,  0,  4, 0,  9,  0,  1, 0,
		 8,  4,  7, 0,  2,  3, 11, 0,  4,  7, 11, 0,  9,  4, 11, 0,
		 9, 11,  2, 0,  9,  2,  1, 0,  3, 10,  1, 0,  3, 11, 10, 0,
		 7,  8,  4, 0,  1, 11, 10, 0,  1,  4, 11, 0,  1,  0,  4, 0,
		 7, 11,  4, 0,  4,  7,  8, 0,  9,  0, 11, 0,  9, 11, 10, 0,
		11,  0,  3, 0,  4,  7, 11, 0,  4, 11,  9, 0,  9, 11, 10, 0,
		 9,  5,  4, 0,  9,  5,  4, 0,  0,  8,  3, 0,  0,  5,  4, 0,
		 1,  5,  0, 0,  8,  5,  4, 0,  8,  3,  5, 0,  3,  1,  5, 0,
		 1,  2, 10, 0,  9,  5,  4, 0,  3,  0,  8, 0,  1,  2, 10, 0,
		 4,  9,  5, 0,  5,  2, 10, 0,  5,  4,  2, 0,  4,  0,  2, 0,
		 2, 10,  5, 0,  3,  2,  5, 0,  3,  5,  4, 0,  3,  4,  8, 0,
		 9,  5,  4, 0,  2,  3, 11, 0,  0, 11,  2, 0,  0,  8, 11, 0,
		 4,  9,  5, 0,  0,  5,  4, 0,  0,  1,  5, 0,  2,  3, 11, 0,
		 2,  1,  5, 0,  2,  5,  8, 0,  2,  8, 11, 0,  4,  8,  5, 0,
		10,  3, 11, 0, 10,  1,  3, 0,  9,  5,  4, 0,  4,  9,  5, 0,
		 0,  8,  1, 0,  8, 10,  1, 0,  8, 11, 10, 0,  5,  4,  0, 0,
		 5,  0, 11, 0,  5, 11, 10, 0, 11,  0,  3, 0,  5,  4,  8, 0,
		 5,  8, 10, 0, 10,  8, 11, 0,  9,  7,  8, 0,  5,  7,  9, 0,
		 9,  3,  0, 0,  9,  5,  3, 0,  5,  7,  3, 0,  0,  7,  8, 0,
		 0,  1,  7, 0,  1,  5,  7, 0,  1,  5,  3, 0,  3,  5,  7, 0,
		 9,  7,  8, 0,  9,  5,  7, 0, 10,  1,  2, 0, 10,  1,  2, 0,
		 9,  5,  0, 0,  5,  3,  0, 0,  5,  7,  3, 0,  8,  0,  2, 0,
		 8,  2,  5, 0,  8,  5,  7, 0, 10,  5,  2, 0,  2, 10,  5, 0,
		 2,  5,  3, 0,  3,  5,  7, 0,  7,  9,  5, 0,  7,  8,  9, 0,
		 3, 11,  2, 0,  9,  5,  7, 0,  9,  7,  2, 0,  9,  2,  0, 0,
		 2,  7, 11, 0,  2,  3, 11, 0,  0,  1,  8, 0,  1,  7,  8, 0,
		 1,  5,  7, 0, 11,  2,  1, 0, 11,  1,  7, 0,  7,  1,  5, 0,
		 9,  5,  8, 0,  8,  5,  7, 0, 10,  1,  3, 0, 10,  3, 11, 0,
		 5,  7,  0, 0,  5,  0,  9, 0,  7, 11,  0, 0,  1,  0, 10, 0,
		11, 10,  0, 0, 11, 10,  0, 0, 11,  0,  3, 0, 10,  5,  0, 0,
		 8,  0,  7, 0,  5,  7,  0, 0, 11, 10,  5, 0,  7, 11,  5, 0,
		10,  6,  5, 0,  0,  8,  3, 0,  5, 10,  6, 0,  9,  0,  1, 0,
		 5, 10,  6, 0,  1,  8,  3, 0,  1,  9,  8, 0,  5, 10,  6, 0,
		 1,  6,  5, 0,  2,  6,  1, 0,  1,  6,  5, 0,  1,  2,  6, 0,
		 3,  0,  8, 0,  9,  6,  5, 0,  9,  0,  6, 0,  0,  2,  6, 0,
		 5,  9,  8, 0,  5,  8,  2, 0,  5,  2,  6, 0,  3,  2,  8, 0,
		 2,  3, 11, 0, 10,  6,  5, 0, 11,  0,  8, 0, 11,  2,  0, 0,
		10,  6,  5, 0,  0,  1,  9, 0,  2,  3, 11, 0,  5, 10,  6, 0,
		 5, 10,  6, 0,  1,  9,  2, 0,  9, 11,  2, 0,  9,  8, 11, 0,
		 6,  3, 11, 0,  6,  5,  3, 0,  5,  1,  3, 0,  0,  8, 11, 0,
		 0, 11,  5, 0,  0,  5,  1, 0,  5, 11,  6, 0,  3, 11,  6, 0,
		 0,  3,  6, 0,  0,  6,  5, 0,  0,  5,  9, 0,  6,  5,  9, 0,
		 6,  9, 11, 0, 11,  9,  8, 0,  5, 10,  6, 0,  4,  7,  8, 0,
		 4,  3,  0, 0,  4,  7,  3, 0,  6,  5, 10, 0,  1,  9,  0, 0,
		 5, 10,  6, 0,  8,  4,  7, 0, 10,  6,  5, 0,  1,  9,  7, 0,
		 1,  7,  3, 0,  7,  9,  4, 0,  6,  1,  2, 0,  6,  5,  1, 0,
		 4,  7,  8, 0,  1,  2,  5, 0,  5,  2,  6, 0,  3,  0,  4, 0,
		 3,  4,  7, 0,  8,  4,  7, 0,  9,  0,  5, 0,  0,  6,  5, 0,
		 0,  2,  6, 0,  7,  3,  9, 0,  7,  9,  4, 0,  3,  2,  9, 0,
		 5,  9,  6, 0,  2,  6,  9, 0,  3, 11,  2, 0,  7,  8,  4, 0,
		10,  6,  5, 0,  5, 10,  6, 0,  4,  7,  2, 0,  4,  2,  0, 0,
		 2,  7, 11, 0,  0,  1,  9, 0,  4,  7,  8, 0,  2,  3, 11, 0,
		 5, 10,  6, 0,  9,  2,  1, 0,  9, 11,  2, 0,  9,  4, 11, 0,
		 7, 11,  4, 0,  5, 10,  6, 0,  8,  4,  7, 0,  3, 11,  5, 0,
		 3,  5,  1, 0,  5, 11,  6, 0,  5,  1, 11, 0,  5, 11,  6, 0,
		 1,  0, 11, 0,  7, 11,  4, 0,  0,  4, 11, 0,  0,  5,  9, 0,
		 0,  6,  5, 0,  0,  3,  6, 0, 11,  6,  3, 0,  8,  4,  7, 0,
		 6,  5,  9, 0,  6,  9, 11, 0,  4,  7,  9, 0,  7, 11,  9, 0,
		10,  4,  9, 0,  6,  4, 10, 0,  4, 10,  6, 0,  4,  9, 10, 0,
		 0,  8,  3, 0, 10,  0,  1, 0, 10,  6,  0, 0,  6,  4,  0, 0,
		 8,  3,  1, 0,  8,  1,  6, 0,  8,  6,  4, 0,  6,  1, 10, 0,
		 1,  4,  9, 0,  1,  2,  4, 0,  2,  6,  4, 0,  3,  0,  8, 0,
		 1,  2,  9, 0,  2,  4,  9, 0,  2,  6,  4, 0,  0,  2,  4, 0,
		 4,  2,  6, 0,  8,  3,  2, 0,  8,  2,  4, 0,  4,  2,  6, 0,
		10,  4,  9, 0, 10,  6,  4, 0, 11,  2,  3, 0,  0,  8,  2, 0,
		 2,  8, 11, 0,  4,  9, 10, 0,  4, 10,  6, 0,  3, 11,  2, 0,
		 0,  1,  6, 0,  0,  6,  4, 0,  6,  1, 10, 0,  6,  4,  1, 0,
		 6,  1, 10, 0,  4,  8,  1, 0,  2,  1, 11, 0,  8, 11,  1, 0,
		 9,  6,  4, 0,  9,  3,  6, 0,  9,  1,  3, 0, 11,  6,  3, 0,
		 8, 11,  1, 0,  8,  1,  0, 0, 11,  6,  1, 0,  9,  1,  4, 0,
		 6,  4,  1, 0,  3, 11,  6, 0,  3,  6,  0, 0,  0,  6,  4, 0,
		 6,  4,  8, 0, 11,  6,  8, 0,  7, 10,  6, 0,  7,  8, 10, 0,
		 8,  9, 10, 0,  0,  7,  3, 0,  0, 10,  7, 0,  0,  9, 10, 0,
		 6,  7, 10, 0, 10,  6,  7, 0,  1, 10,  7, 0,  1,  7,  8, 0,
		 1,  8,  0, 0, 10,  6,  7, 0, 10,  7,  1, 0,  1,  7,  3, 0,
		 1,  2,  6, 0,  1,  6,  8, 0,  1,  8,  9, 0,  8,  6,  7, 0,
		 2,  6,  9, 0,  2,  9,  1, 0,  6,  7,  9, 0,  0,  9,  3, 0,
		 7,  3,  9, 0,  7,  8,  0, 0,  7,  0,  6, 0,  6,  0,  2, 0,
		 7,  3,  2, 0,  6,  7,  2, 0,  2,  3, 11, 0, 10,  6,  8, 0,
		10,  8,  9, 0,  8,  6,  7, 0,  2,  0,  7, 0,  2,  7, 11, 0,
		 0,  9,  7, 0,  6,  7, 10, 0,  9, 10,  7, 0,  1,  8,  0, 0,
		 1,  7,  8, 0,  1, 10,  7, 0,  6,  7, 10, 0,  2,  3, 11, 0,
		11,  2,  1, 0, 11,  1,  7, 0, 10,  6,  1, 0,  6,  7,  1, 0,
		 8,  9,  6, 0,  8,  6,  7, 0,  9,  1,  6, 0, 11,  6,  3, 0,
		 1,  3,  6, 0,  0,  9,  1, 0, 11,  6,  7, 0,  7,  8,  0, 0,
		 7,  0,  6, 0,  3, 11,  0, 0, 11,  6,  0, 0,  7, 11,  6, 0,
		 7,  6, 11, 0,  3,  0,  8, 0, 11,  7,  6, 0,  0,  1,  9, 0,
		11,  7,  6, 0,  8,  1,  9, 0,  8,  3,  1, 0, 11,  7,  6, 0,
		10,  1,  2, 0,  6, 11,  7, 0,  1,  2, 10, 0,  3,  0,  8, 0,
		 6, 11,  7, 0,  2,  9,  0, 0,  2, 10,  9, 0,  6, 11,  7, 0,
		 6, 11,  7, 0,  2, 10,  3, 0, 10,  8,  3, 0, 10,  9,  8, 0,
		 7,  2,  3, 0,  6,  2,  7, 0,  7,  0,  8, 0,  7,  6,  0, 0,
		 6,  2,  0, 0,  2,  7,  6, 0,  2,  3,  7, 0,  0,  1,  9, 0,
		 1,  6,  2, 0,  1,  8,  6, 0,  1,  9,  8, 0,  8,  7,  6, 0,
		10,  7,  6, 0, 10,  1,  7, 0,  1,  3,  7, 0, 10,  7,  6, 0,
		 1,  7, 10, 0,  1,  8,  7, 0,  1,  0,  8, 0,  0,  3,  7, 0,
		 0,  7, 10, 0,  0, 10,  9, 0,  6, 10,  7, 0,  7,  6, 10, 0,
		 7, 10,  8, 0,  8, 10,  9, 0,  6,  8,  4, 0, 11,  8,  6, 0,
		 3,  6, 11, 0,  3,  0,  6, 0,  0,  4,  6, 0,  8,  6, 11, 0,
		 8,  4,  6, 0,  9,  0,  1, 0,  9,  4,  6, 0,  9,  6,  3, 0,
		 9,  3,  1, 0, 11,  3,  6, 0,  6,  8,  4, 0,  6, 11,  8, 0,
		 2, 10,  1, 0,  1,  2, 10, 0,  3,  0, 11, 0,  0,  6, 11, 0,
		 0,  4,  6, 0,  4, 11,  8, 0,  4,  6, 11, 0,  0,  2,  9, 0,
		 2, 10,  9, 0, 10,  9,  3, 0, 10,  3,  2, 0,  9,  4,  3, 0,
		11,  3,  6, 0,  4,  6,  3, 0,  8,  2,  3, 0,  8,  4,  2, 0,
		 4,  6,  2, 0,  0,  4,  2, 0,  4,  6,  2, 0,  1,  9,  0, 0,
		 2,  3,  4, 0,  2,  4,  6, 0,  4,  3,  8, 0,  1,  9,  4, 0,
		 1,  4,  2, 0,  2,  4,  6, 0,  8,  1,  3, 0,  8,  6,  1, 0,
		 8,  4,  6, 0,  6, 10,  1, 0, 10,  1,  0, 0, 10,  0,  6, 0,
		 6,  0,  4, 0,  4,  6,  3, 0,  4,  3,  8, 0,  6, 10,  3, 0,
		 0,  3,  9, 0, 10,  9,  3, 0, 10,  9,  4, 0,  6, 10,  4, 0,
		 4,  9,  5, 0,  7,  6, 11, 0,  0,  8,  3, 0,  4,  9,  5, 0,
		11,  7,  6, 0,  5,  0,  1, 0,  5,  4,  0, 0,  7,  6, 11, 0,
		11,  7,  6, 0,  8,  3,  4, 0,  3,  5,  4, 0,  3,  1,  5, 0,
		 9,  5,  4, 0, 10,  1,  2, 0,  7,  6, 11, 0,  6, 11,  7, 0,
		 1,  2, 10, 0,  0,  8,  3, 0,  4,  9,  5, 0,  7,  6, 11, 0,
		 5,  4, 10, 0,  4,  2, 10, 0,  4,  0,  2, 0,  3,  4,  8, 0,
		 3,  5,  4, 0,  3,  2,  5, 0, 10,  5,  2, 0, 11,  7,  6, 0,
		 7,  2,  3, 0,  7,  6,  2, 0,  5,  4,  9, 0,  9,  5,  4, 0,
		 0,  8,  6, 0,  0,  6,  2, 0,  6,  8,  7, 0,  3,  6,  2, 0,
		 3,  7,  6, 0,  1,  5,  0, 0,  5,  4,  0, 0,  6,  2,  8, 0,
		 6,  8,  7, 0,  2,  1,  8, 0,  4,  8,  5, 0,  1,  5,  8, 0,
		 9,  5,  4, 0, 10,  1,  6, 0,  1,  7,  6, 0,  1,  3,  7, 0,
		 1,  6, 10, 0,  1,  7,  6, 0,  1,  0,  7, 0,  8,  7,  0, 0,
		 9,  5,  4, 0,  4,  0, 10, 0,  4, 10,  5, 0,  0,  3, 10, 0,
		 6, 10,  7, 0,  3,  7, 10, 0,  7,  6, 10, 0,  7, 10,  8, 0,
		 5,  4, 10, 0,  4,  8, 10, 0,  6,  9,  5, 0,  6, 11,  9, 0,
		11,  8,  9, 0,  3,  6, 11, 0,  0,  6,  3, 0,  0,  5,  6, 0,
		 0,  9,  5, 0,  0, 11,  8, 0,  0,  5, 11, 0,  0,  1,  5, 0,
		 5,  6, 11, 0,  6, 11,  3, 0,  6,  3,  5, 0,  5,  3,  1, 0,
		 1,  2, 10, 0,  9,  5, 11, 0,  9, 11,  8, 0, 11,  5,  6, 0,
		 0, 11,  3, 0,  0,  6, 11, 0,  0,  9,  6, 0,  5,  6,  9, 0,
		 1,  2, 10, 0, 11,  8,  5, 0, 11,  5,  6, 0,  8,  0,  5, 0,
		10,  5,  2, 0,  0,  2,  5, 0,  6, 11,  3, 0,  6,  3,  5, 0,
		 2, 10,  3, 0, 10,  5,  3, 0,  5,  8,  9, 0,  5,  2,  8, 0,
		 5,  6,  2, 0,  3,  8,  2, 0,  9,  5,  6, 0,  9,  6,  0, 0,
		 0,  6,  2, 0,  1,  5,  8, 0,  1,  8,  0, 0,  5,  6,  8, 0,
		 3,  8,  2, 0,  6,  2,  8, 0,  1,  5,  6, 0,  2,  1,  6, 0,
		 1,  3,  6, 0,  1,  6, 10, 0,  3,  8,  6, 0,  5,  6,  9, 0,
		 8,  9,  6, 0, 10,  1,  0, 0, 10,  0,  6, 0,  9,  5,  0, 0,
		 5,  6,  0, 0,  0,  3,  8, 0,  5,  6, 10, 0, 10,  5,  6, 0,
		11,  5, 10, 0,  7,  5, 11, 0, 11,  5, 10, 0, 11,  7,  5, 0,
		 8,  3,  0, 0,  5, 11,  7, 0,  5, 10, 11, 0,  1,  9,  0, 0,
		10,  7,  5, 0, 10, 11,  7, 0,  9,  8,  1, 0,  8,  3,  1, 0,
		11,  1,  2, 0, 11,  7,  1, 0,  7,  5,  1, 0,  0,  8,  3, 0,
		 1,  2,  7, 0,  1,  7,  5, 0,  7,  2, 11, 0,  9,  7,  5, 0,
		 9,  2,  7, 0,  9,  0,  2, 0,  2, 11,  7, 0,  7,  5,  2, 0,
		 7,  2, 11, 0,  5,  9,  2, 0,  3,  2,  8, 0,  9,  8,  2, 0,
		 2,  5, 10, 0,  2,  3,  5, 0,  3,  7,  5, 0,  8,  2,  0, 0,
		 8,  5,  2, 0,  8,  7,  5, 0, 10,  2,  5, 0,  9,  0,  1, 0,
		 5, 10,  3, 0,  5,  3,  7, 0,  3, 10,  2, 0,  9,  8,  2, 0,
		 9,  2,  1, 0,  8,  7,  2, 0, 10,  2,  5, 0,  7,  5,  2, 0,
		 1,  3,  5, 0,  3,  7,  5, 0,  0,  8,  7, 0,  0,  7,  1, 0,
		 1,  7,  5, 0,  9,  0,  3, 0,  9,  3,  5, 0,  5,  3,  7, 0,
		 9,  8,  7, 0,  5,  9,  7, 0,  5,  8,  4, 0,  5, 10,  8, 0,
		10, 11,  8, 0,  5,  0,  4, 0,  5, 11,  0, 0,  5, 10, 11, 0,
		11,  3,  0, 0,  0,  1,  9, 0,  8,  4, 10, 0,  8, 10, 11, 0,
		10,  4,  5, 0, 10, 11,  4, 0, 10,  4,  5, 0, 11,  3,  4, 0,
		 9,  4,  1, 0,  3,  1,  4, 0,  2,  5,  1, 0,  2,  8,  5, 0,
		 2, 11,  8, 0,  4,  5,  8, 0,  0,  4, 11, 0,  0, 11,  3, 0,
		 4,  5, 11, 0,  2, 11,  1, 0,  5,  1, 11, 0,  0,  2,  5, 0,
		 0,  5,  9, 0,  2, 11,  5, 0,  4,  5,  8, 0, 11,  8,  5, 0,
		 9,  4,  5, 0,  2, 11,  3, 0,  2,  5, 10, 0,  3,  5,  2, 0,
		 3,  4,  5, 0,  3,  8,  4, 0,  5, 10,  2, 0,  5,  2,  4, 0,
		 4,  2,  0, 0,  3, 10,  2, 0,  3,  5, 10, 0,  3,  8,  5, 0,
		 4,  5,  8, 0,  0,  1,  9, 0,  5, 10,  2, 0,  5,  2,  4, 0,
		 1,  9,  2, 0,  9,  4,  2, 0,  8,  4,  5, 0,  8,  5,  3, 0,
		 3,  5,  1, 0,  0,  4,  5, 0,  1,  0,  5, 0,  8,  4,  5, 0,
		 8,  5,  3, 0,  9,  0,  5, 0,  0,  3,  5, 0,  9,  4,  5, 0,
		 4, 11,  7, 0,  4,  9, 11, 0,  9, 10, 11, 0,  0,  8,  3, 0,
		 4,  9,  7, 0,  9, 11,  7, 0,  9, 10, 11, 0,  1, 10, 11, 0,
		 1, 11,  4, 0,  1,  4,  0, 0,  7,  4, 11, 0,  3,  1,  4, 0,
		 3,  4,  8, 0,  1, 10,  4, 0,  7,  4, 11, 0, 10, 11,  4, 0,
		 4, 11,  7, 0,  9, 11,  4, 0,  9,  2, 11, 0,  9,  1,  2, 0,
		 9,  7,  4, 0,  9, 11,  7, 0,  9,  1, 11, 0,  2, 11,  1, 0,
		 0,  8,  3, 0, 11,  7,  4, 0, 11,  4,  2, 0,  2,  4,  0, 0,
		11,  7,  4, 0, 11,  4,  2, 0,  8,  3,  4, 0,  3,  2,  4, 0,
		 2,  9, 10, 0,  2,  7,  9, 0,  2,  3,  7, 0,  7,  4,  9, 0,
		 9, 10,  7, 0,  9,  7,  4, 0, 10,  2,  7, 0,  8,  7,  0, 0,
		 2,  0,  7, 0,  3,  7, 10, 0,  3, 10,  2, 0,  7,  4, 10, 0,
		 1, 10,  0, 0,  4,  0, 10, 0,  1, 10,  2, 0,  8,  7,  4, 0,
		 4,  9,  1, 0,  4,  1,  7, 0,  7,  1,  3, 0,  4,  9,  1, 0,
		 4,  1,  7, 0,  0,  8,  1, 0,  8,  7,  1, 0,  4,  0,  3, 0,
		 7,  4,  3, 0,  4,  8,  7, 0,  9, 10,  8, 0, 10, 11,  8, 0,
		 3,  0,  9, 0,  3,  9, 11, 0, 11,  9, 10, 0,  0,  1, 10, 0,
		 0, 10,  8, 0,  8, 10, 11, 0,  3,  1, 10, 0, 11,  3, 10, 0,
		 1,  2, 11, 0,  1, 11,  9, 0,  9, 11,  8, 0,  3,  0,  9, 0,
		 3,  9, 11, 0,  1,  2,  9, 0,  2, 11,  9, 0,  0,  2, 11, 0,
		 8,  0, 11, 0,  3,  2, 11, 0,  2,  3,  8, 0,  2,  8, 10, 0,
		10,  8,  9, 0,  9, 10,  2, 0,  0,  9,  2, 0,  2,  3,  8, 0,
		 2,  8, 10, 0,  0,  1,  8, 0,  1, 10,  8, 0,  1, 10,  2, 0,
		 1,  3,  8, 0,  9,  1,  8, 0,  0,  9,  1, 0,  0,  3,  8, 0
	};

	return reinterpret_cast< util::uint4 const * >( triTable );
}

} // namespace